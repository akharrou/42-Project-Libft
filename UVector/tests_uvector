/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tests_uvector.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: akharrou <akharrou@student.42.us.org>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/05/21 10:52:54 by akharrou          #+#    #+#             */
/*   Updated: 2019/05/24 12:26:16 by akharrou         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../Includes/libft.h"

int		main(int ac, char *av[])
{
	t_uqueue 	students;
	intmax_t	val;
	size_t		i;

	++av;


	val = 999;

/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* INSTANTIATING uvector OBJECT */

	students = uvector.constructor(1);


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* IS EMPTY */

	if (students.isempty(&students))
		ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[EMPTY]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* APPENDING / ENQU'ING / PUSHING / INSERTING */

	// i = 0;
	// while (i < students.capacity)
	// {
	// 	ft_asprintf((char **)&value, "%s%i", "Jason", i);

	// 	/* All the ways to insert 1 data element at a time */

	// 	// students.insert(&students, i, value);
	// 	// students.insert(&students, (students.capacity - 1) - i, value);
	// 	// students.push(&students, value);
	// 	// students.enque(&students, value);
	// 	// students.append(&students, value);
	// 	// students.appendleft(&students, value);

	// 	ft_printf("%3i:   %-20s> Length: %-7i> Capacity: %i\n", i, students.uvector[i], students.length, students.capacity);
	// 	++i;

	// 	if (students.isfull(&students))
	// 		ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[FULL]-- -- -- -- -- -- -- -- --\n\n");
	// }


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* ADD 'N' DATA ELEMENTS & RESIZING */

	ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[ADDING ELEMENTS START]-- -- -- -- -- -- -- -- --\n\n");
	i = 0;
	while (i < 1200)
	{
		students.enque(&students, val);
		ft_printf("%3i:   %-20i> Length: %-7i> Capacity: %i\n", i, students.uvector[i], students.length, students.capacity);
		++i;

		if (students.isfull(&students))
			ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[FULL]-- -- -- -- -- -- -- -- --\n\n");
	}
	ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[ADDING ELEMENTS START]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* [ OVER ] EXTEND */

	// ft_printf("Extend: [%i]\n", students.extend(&students, 8, 90, 91, 92, 93, 94, 95, 96, 97));


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* [ OVER ] EXTENDLEFT */

	// ft_printf("ExtendLeft: [%i]\n", students.extendleft(&students, 8, 190, 191, 192, 193, 194, 195, 196, 197));


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* PRINT uvector */

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[PRINT START]-- -- -- -- -- -- -- -- --\n\n");
	// i = 0;
	// while (i < students.capacity)
	// {
	// 	ft_printf("%3i:  %-20i> Length: %-7i> Capacity: %i\n", i, students.uvector[i], students.length, students.capacity);
	// 	++i;
	// }
	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[PRINT END]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* RIGHTSHIFT */

	// students = uvector.rightshift(students, 8);


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* LEFTSHIFT */

	// students = uvector.leftshift(students, 8);


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* PRINT uvector */

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[PRINT START]-- -- -- -- -- -- -- -- --\n\n");
	// i = 0;
	// while (i < students.capacity)
	// {
	// 	ft_printf("%3i:  %-20s> Length: %-7i> Capacity: %i\n", i, students.uvector[i], students.length, students.capacity);
	// 	++i;
	// }
	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[PRINT END]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* RIGHT SHIFTING */

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[RIGHT SHIFT START]-- -- -- -- -- -- -- -- --\n\n");

	// ft_printf("%s", "BEFORE RIGHT SHIFT:\n\n");
	// i = 0;
	// while (i < students.length)
	// {
	// 	ft_printf("%3i: %-20s\n", i, students.uvector[i]);
	// 	++i;
	// }

	// students = uvector.rightshift(students, 5);

	// ft_printf("%s", "\n\nAFTER LEFT SHIFT:\n\n");
	// i = 0;
	// while (i < students.length)
	// {
	// 	ft_printf("%3i: %-20s\n", i, students.uvector[i]);
	// 	++i;
	// }

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[RIGHT SHIFT END]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* LEFT SHIFTING */

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[LEFT SHIFT START]-- -- -- -- -- -- -- -- --\n\n");

	// ft_printf("%s", "BEFORE LEFT SHIFT:\n\n");
	// i = 0;
	// while (i < students.length)
	// {
	// 	ft_printf("%3i: %-20s\n", i, students.uvector[i]);
	// 	++i;
	// }

	// students = uvector.leftshift(students, 5);

	// ft_printf("%s", "\n\nAFTER LEFT SHIFT:\n\n");
	// i = 0;
	// while (i < students.length)
	// {
	// 	ft_printf("%3i: %-20s\n", i, students.uvector[i]);
	// 	++i;
	// }

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[LEFT SHIFT END]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* DUPLICATION */

	// t_uvector students_dup = uvector.duplicate(students);

	// ft_printf("\n\n|%3s:|      %-20s|      %-20s|\n\n", "IDX", "STUDENTS uvector", "DUPLICATE uvector");
	// i = 0;
	// while (i < students.length && i < students_dup.length)
	// {
	// 	ft_printf("|%3i:|      %p|      %p|\n\n", i, students.uvector[i], students_dup.uvector[i]);
	// 	++i;
	// }


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* REVERSING */

	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[START REVERSED]-- -- -- -- -- -- -- -- --\n\n");
	// students = uvector.reverse(students);

	// i = 0;
	// while (i < students.capacity + 1)
	// {
	// 	ft_printf("%3i: %s\n", i, students.uvector[i]);
	// 	++i;
	// }
	// ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[END REVERSED]-- -- -- -- -- -- -- -- --\n\n");


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* DEQUE'ING */

	// i = 0;
	// while (students.length != 0)
	// {
	// 	ft_printf("%3i: %-20s> Length: %-7i> Capacity: %i\n", 0, students.uvector[0], students.length, students.capacity);
	// 	ft_printf("%3i: %-20s> Dequed\n", 0, students.deque(&students));
	// 	ft_printf("%3i: %-20s> Length: %-7i> Capacity: %i\n\n", 0, students.uvector[0], students.length, students.capacity);

	// 	if (students.isempty(&students))
	// 		ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[EMPTY]-- -- -- -- -- -- -- -- --\n\n");
	// }


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* POPLEFT */

	// i = 0;
	// while (students.length != 0)
	// {
	// 	ft_printf("%3i: %-20s> Length: %-7i> Capacity: %i\n", 0, students.uvector[0], students.length, students.capacity);
	// 	ft_printf("%3i: %-20s> Leftpopped\n", 0, students.popleft(&students));
	// 	ft_printf("%3i: %-20s> Length: %-7i> Capacity: %i\n\n", 0, students.uvector[0], students.length, students.capacity);

	// 	if (students.isempty(&students))
	// 		ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[EMPTY]-- -- -- -- -- -- -- -- --\n\n");
	// }


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */


	/* POP */

	// i = 0;
	// while (students.length != 0)
	// {
	// 	ft_printf("%3i: %-20s> Length: %-7i> Capacity: %i\n", students.length - 1, students.uvector[students.length - 1], students.length, students.capacity);
	// 	ft_printf("%3i: Popped ———>  %-20s\n\n", students.length - 1, students.pop(&students));

	// 	if (students.isempty(&students))
	// 		ft_printf("%s", "\n-- -- -- -- -- -- -- -- --[EMPTY]-- -- -- -- -- -- -- -- --\n\n");
	// }

	// ft_printf("%3i: Popped ———>  %-20s\n\n", students.length - 1, students.pop(&students));


/* ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **  */

	// sleep(1);

	(void)ac;
	(void)av;
	return (0);
}






/*

#include "Includes/libft.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <math.h>

int		main(void)
{
	t_uvector	ages;
	size_t		i;

	ages = uvector.constructor(10);

	ages.setall(&ages, -1);

	/* PRINT UVECTOR */
	ft_printf("—— —— —— —— —— —— [PRINT START] —— —— —— —— —— —— ——\n\n");
	i = 0; while (i < ages.length) { ft_printf("%3i:  %20ji > Length: %10i > Capacity : %i\n", i, ages.uvector[i], ages.length, ages.capacity); ++i; }
	ft_printf("\n—— —— —— —— —— —— [PRINT END] —— —— —— —— —— —— ——\n\n");

	ages.extend(&ages, 12, 1, 2 , 3 , 4 , 5  , 6 , 7 , 8 , 9 , 10 , 11 , 12);
	ages.extendleft(&ages, 12, 11, 12, 13, 14, 15, 16, 17, 18, 19, 110, 111, 112);

	/* PRINT UVECTOR */
	ft_printf("—— —— —— —— —— —— [PRINT START] —— —— —— —— —— —— ——\n\n");
	i = 0; while (i < ages.length) { ft_printf("%3i:  %20ji > Length: %10i > Capacity : %i\n", i, ages.uvector[i], ages.length, ages.capacity); ++i; }
	ft_printf("\n—— —— —— —— —— —— [PRINT END] —— —— —— —— —— —— ——\n\n");

	// i = 0;
	// while (i < 100)
	// {
	// 	// ages.append(&ages ,i);
	// 	ft_printf("%3i:  %20ld > Length: %10i > Capacity : %i\n", i, ages.uvector[i], ages.length, ages.capacity);
	// 	++i;
	// }

	uvector.destructor(&ages);

	return (0);
}

*/
